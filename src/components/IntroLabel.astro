---
import sealImage1 from '@/assets/images/img-seal-01.png'
import sealImage2 from '@/assets/images/img-seal-02.png'
import { cn } from '@/utils/cn'

interface Props {
  class?: string
}

const { class: className = '' } = Astro.props
---

<section class={cn('relative py-20 md:py-32 lg:py-16', className)}>
  <div class="container mx-auto px-4">
    <div class="flex flex-col items-center gap-2 md:gap-2.5">
      <!-- Japanese text label -->
      <div class="relative inline-block" data-sticker-delay="0">
        <img
          src={sealImage1.src}
          alt="きみがいるから、行き先がふえていく"
          width={562}
          height={80}
          loading="lazy"
          class="sticker-target block w-[39.03vw] max-w-[562px] h-auto max-[767px]:w-[80vw] max-[767px]:max-w-[300px]"
        />
      </div>

      <!-- English text label -->
      <div class="relative inline-block" data-sticker-delay="200">
        <img
          src={sealImage2.src}
          alt="A heart beat, echoing into the wild."
          width={464}
          height={52}
          loading="lazy"
          class="sticker-target block w-[32.22vw] max-w-[464px] h-auto max-[767px]:w-[70vw] max-[767px]:max-w-[250px]"
        />
      </div>
    </div>
  </div>
</section>

<script>
  import { useStickerAnimation } from '@/utils/sticker-animation'

  // Store animation instances for cleanup
  const animationInstances: ReturnType<typeof useStickerAnimation>[] = []

  // Initialize sticker animations
  function initStickerAnimations() {
    const stickerWrappers = document.querySelectorAll('[data-sticker-delay]')

    stickerWrappers.forEach((wrapper) => {
      const target = wrapper.querySelector('.sticker-target') as HTMLElement
      const delay = parseInt(
        (wrapper as HTMLElement).dataset.stickerDelay || '0'
      )

      if (target) {
        // Create sticker animation with auto animation on scroll
        const animation = useStickerAnimation(target, {
          direction: 'left',
          delay: delay,
          duration: 1000,
          easing: 'cubic-bezier(0.23, 1, 0.32, 1)',
          shadowIntensity: 0.5,
          autoAnimate: true,
          autoAnimationDelay: 200,
          observerOptions: {
            threshold: 0.2,
            rootMargin: '0px 0px -100px 0px',
          },
        })

        animationInstances.push(animation)
      }
    })
  }

  // Initialize on DOM ready
  document.addEventListener('DOMContentLoaded', initStickerAnimations)

  // Cleanup on page unload
  window.addEventListener('beforeunload', () => {
    animationInstances.forEach((instance) => instance.destroy())
  })
</script>
