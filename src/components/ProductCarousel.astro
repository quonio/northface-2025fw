---
import ProductInfoCard from './ProductInfoCard.astro'
import ImageCard from './ImageCard.astro'
import NumberPagination from './NumberPagination.astro'
import type { ProductInfo, CarouselItem } from '@/types/product'

interface Props {
  productInfo: ProductInfo
  items: CarouselItem[]
  id: string
  rowIndex?: number
}

const { productInfo, items, id, rowIndex = 1 } = Astro.props

// rowIndexに基づいてテープSVGパスを決定する関数
const getTapeSvgPath = (rowIdx: number): string => {
  const tapeMapping: Record<number, string> = {
    1: '/images/decorations/tape-9.svg',
    2: '/images/decorations/tape-8.svg',
    3: '/images/decorations/tape-1.svg',
    4: '/images/decorations/tape-2.svg',
    5: '/images/decorations/tape-3.svg',
  }
  return tapeMapping[rowIdx] || '/images/decorations/tape-8.svg'
}

// rowIndexに基づいてテープSVGの幅（vw）を決定する関数
const getTapeWidth = (rowIdx: number): string => {
  // 1440pxを基準にvwに変換
  const widthMapping: Record<number, string> = {
    1: `${(334 / 1440) * 100}vw`, // 23.19vw
    2: `${(219 / 1440) * 100}vw`, // 15.21vw
    3: `${(334 / 1440) * 100}vw`, // 23.19vw
    4: `${(274 / 1440) * 100}vw`, // 19.03vw
    5: `${(165 / 1440) * 100}vw`, // 11.46vw
  }
  return widthMapping[rowIdx] || '20vw'
}

// モバイル用のテープ幅を決定する関数
const getTapeWidthMobile = (rowIdx: number): string => {
  // 375pxを基準にvwに変換（PC版の約40%サイズ）
  const widthMapping: Record<number, string> = {
    1: `${(187 / 375) * 100}vw`, // 35.73vw
    2: `${(140 / 375) * 100}vw`, // 23.47vw
    3: `${(197 / 375) * 100}vw`, // 35.73vw
    4: `${(187 / 375) * 100}vw`, // 29.33vw
    5: `${(115 / 375) * 100}vw`, // 17.60vw
  }
  return widthMapping[rowIdx] || '30vw'
}
---

<div
  class="product-carousel relative"
  data-carousel={id}
  data-row-index={rowIndex}
>
  <!-- Desktop: Fixed 4 positions layout -->
  <div class="hidden lg:flex gap-6 relative -ml-[20vw]">
    <!-- Position 1 -->
    <div class="relative w-[34vw] flex-shrink-0 aspect-[3/4]">
      {
        items.map((item, index) => (
          <div
            class:list={[
              'absolute inset-0 transition-opacity duration-700',
              {
                'opacity-100': index === items.length - 1,
                'opacity-0': index !== items.length - 1,
              },
            ]}
            data-carousel-item
            data-position="1"
            data-item-index={index}
          >
            <ImageCard image={item.image} alt={item.alt} />
          </div>
        ))
      }
    </div>

    <!-- Position 2 (or ProductInfoCard for row 2) -->
    <div class="relative w-[34vw] flex-shrink-0 aspect-[3/4]">
      {
        rowIndex % 2 === 0 ? (
          <div class="relative h-full">
            <img
              src={getTapeSvgPath(rowIndex)}
              alt=""
              class="absolute left-1/2 -translate-x-1/2 -translate-y-1/2 z-10 opacity-95"
              style={`width: ${getTapeWidth(rowIndex)}`}
            />
            <ProductInfoCard
              {...productInfo}
              totalPages={items.length}
              carouselId={id}
            />
          </div>
        ) : (
          items.map((item, index) => (
            <div
              class:list={[
                'absolute inset-0 transition-opacity duration-700',
                { 'opacity-100': index === 0, 'opacity-0': index !== 0 },
              ]}
              data-carousel-item
              data-position="2"
              data-item-index={index}
            >
              <ImageCard image={item.image} alt={item.alt} />
            </div>
          ))
        )
      }
    </div>

    <!-- Position 3 (or ProductInfoCard for row 1) -->
    <div class="relative w-[34vw] flex-shrink-0 aspect-[3/4]">
      {
        rowIndex % 2 === 1 ? (
          <div class="relative h-full">
            <img
              src={getTapeSvgPath(rowIndex)}
              alt=""
              class="absolute -top-[0.4vw] left-1/2 -translate-x-1/2 -translate-y-1/2 z-10"
              style={`width: ${getTapeWidth(rowIndex)}`}
            />
            <ProductInfoCard
              {...productInfo}
              totalPages={items.length}
              carouselId={id}
            />
          </div>
        ) : (
          items.map((item, index) => (
            <div
              class:list={[
                'absolute inset-0 transition-opacity duration-700',
                { 'opacity-100': index === 1, 'opacity-0': index !== 1 },
              ]}
              data-carousel-item
              data-position="3"
              data-item-index={index}
            >
              <ImageCard image={item.image} alt={item.alt} />
            </div>
          ))
        )
      }
    </div>

    <!-- Position 4 (half visible) -->
    <div class="relative w-[17vw] flex-shrink-0 overflow-hidden aspect-[3/4]">
      {
        items.map((item, index) => (
          <div
            class:list={[
              'absolute inset-0 transition-opacity duration-500',
              { 'opacity-100': index === 2, 'opacity-0': index !== 2 },
            ]}
            data-carousel-item
            data-position="4"
            data-item-index={index}
          >
            <div class="w-[34vw]">
              <ImageCard image={item.image} alt={item.alt} />
            </div>
          </div>
        ))
      }
    </div>
  </div>

  <!-- Mobile: Vertical layout -->
  <div class="lg:hidden" data-mobile-carousel={id}>
    <div class="flex flex-col gap-[4.27vw] md:gap-6">
      <!-- First image position -->
      <div
        class="aspect-[3/4] relative overflow-hidden"
        data-mobile-position="1"
      >
        {
          items.map((item, index) => (
            <div
              class:list={[
                'absolute inset-0 transition-opacity duration-700',
                { 'opacity-100': index === 0, 'opacity-0': index !== 0 },
              ]}
              data-mobile-image-1
              data-mobile-item-index={index}
            >
              <ImageCard image={item.image} alt={item.alt} />
            </div>
          ))
        }
        <!-- Tap areas for navigation -->
        <div class="absolute inset-0 flex">
          <button
            class="w-1/2 h-full opacity-0 cursor-pointer"
            aria-label="Previous image"
            data-mobile-tap-prev></button>
          <button
            class="w-1/2 h-full opacity-0 cursor-pointer"
            aria-label="Next image"
            data-mobile-tap-next></button>
        </div>
      </div>

      <!-- ProductInfoCard with tape -->
      <div class="relative">
        <!-- Tape decoration -->
        <img
          src={getTapeSvgPath(rowIndex)}
          alt=""
          class="absolute -top-[6vw] left-1/2 -translate-x-1/2 z-10 md:hidden opacity-95"
          style={`width: ${getTapeWidthMobile(rowIndex)}; height: auto;`}
        />
        <img
          src={getTapeSvgPath(rowIndex)}
          alt=""
          class="absolute -top-[6vw] left-1/2 -translate-x-1/2 z-10 hidden md:block opacity-95"
          style={`width: ${getTapeWidth(rowIndex)}; height: auto;`}
        />
        <ProductInfoCard
          {...productInfo}
          totalPages={items.length}
          carouselId={id}
        />
      </div>

      <!-- Second image position -->
      <div
        class="aspect-[3/4] relative overflow-hidden"
        data-mobile-position="2"
      >
        {
          items.map((item, index) => (
            <div
              class:list={[
                'absolute inset-0 transition-opacity duration-700',
                { 'opacity-100': index === 1, 'opacity-0': index !== 1 },
              ]}
              data-mobile-image-2
              data-mobile-item-index={index}
            >
              <ImageCard image={item.image} alt={item.alt} />
            </div>
          ))
        }
        <!-- Tap areas for navigation -->
        <div class="absolute inset-0 flex">
          <button
            class="w-1/2 h-full opacity-0 cursor-pointer"
            aria-label="Previous image"
            data-mobile-tap-prev></button>
          <button
            class="w-1/2 h-full opacity-0 cursor-pointer"
            aria-label="Next image"
            data-mobile-tap-next></button>
        </div>
      </div>

      <!-- Pagination (ページネーション) -->
      <NumberPagination
        totalPages={items.length}
        carouselId={id}
        size="lg"
        class="md:hidden -mx-[0] -mt-[4.27vw] border-light-navy-2 border-b border-t-0"
      />
    </div>
  </div>

  <!-- Navigation buttons -->
  <button
    class="carousel-prev hidden lg:block absolute -left-8 top-1/2 -translate-y-1/2 -translate-x-4 md:-translate-x-6 z-10 bg-white/90 hover:bg-white rounded-full p-3 shadow-lg transition-all"
    aria-label="Previous items"
    data-carousel-prev
  >
    <svg
      class="w-5 h-5 text-navy"
      fill="none"
      stroke="currentColor"
      viewBox="0 0 24 24"
    >
      <path
        stroke-linecap="round"
        stroke-linejoin="round"
        stroke-width="2"
        d="M15 19l-7-7 7-7"></path>
    </svg>
  </button>

  <button
    class="carousel-next hidden lg:block absolute -right-8 top-1/2 -translate-y-1/2 translate-x-4 md:translate-x-6 z-10 bg-white/90 hover:bg-white rounded-full p-3 shadow-lg transition-all"
    aria-label="Next items"
    data-carousel-next
  >
    <svg
      class="w-5 h-5 text-navy"
      fill="none"
      stroke="currentColor"
      viewBox="0 0 24 24"
    >
      <path
        stroke-linecap="round"
        stroke-linejoin="round"
        stroke-width="2"
        d="M9 5l7 7-7 7"></path>
    </svg>
  </button>
</div>

<script is:inline>
  function initCarousels() {
    const carousels = document.querySelectorAll('[data-carousel]')

    carousels.forEach((carousel) => {
      const prevBtn = carousel.querySelector('[data-carousel-prev]')
      const nextBtn = carousel.querySelector('[data-carousel-next]')
      const carouselId = carousel.getAttribute('data-carousel')
      const rowIndex = parseInt(carousel.getAttribute('data-row-index') || '1')
      const isDesktop = window.innerWidth >= 768

      // デスクトップとモバイルで異なるページネーションを取得
      const allPaginations = document.querySelectorAll(
        `[data-carousel-pagination="${carouselId}"]`
      )
      let pagination = null

      // モバイルとデスクトップで正しいページネーションを選択
      allPaginations.forEach((p, idx) => {
        const hasMdHidden = Array.from(p.classList).some((cls) =>
          cls.includes('md:hidden')
        )
        if (isDesktop && !hasMdHidden) {
          pagination = p
        } else if (!isDesktop && hasMdHidden) {
          pagination = p
        }
      })

      let currentIndex = 0
      let autoScrollInterval
      let isTransitioning = false

      // Desktop needs navigation buttons
      if (isDesktop && (!prevBtn || !nextBtn)) return

      // Get all carousel items and group by position
      const positions = isDesktop
        ? {
            1: carousel.querySelectorAll('[data-position="1"]'),
            2: carousel.querySelectorAll('[data-position="2"]'),
            3: carousel.querySelectorAll('[data-position="3"]'),
            4: carousel.querySelectorAll('[data-position="4"]'),
          }
        : null

      // For mobile, get track
      const track = carousel.querySelector('[data-carousel-track]')

      // Mobile carousel elements
      const mobileCarousel = !isDesktop
        ? carousel.querySelector('[data-mobile-carousel]')
        : null
      const mobilePosition1 = mobileCarousel?.querySelector(
        '[data-mobile-position="1"]'
      )
      const mobilePosition2 = mobileCarousel?.querySelector(
        '[data-mobile-position="2"]'
      )

      // Total items count
      let totalItems = 0
      if (isDesktop && positions[1]) {
        totalItems = positions[1].length
      } else if (mobileCarousel && mobilePosition1) {
        totalItems = mobilePosition1.querySelectorAll(
          '[data-mobile-item-index]'
        ).length
      }

      if (totalItems === 0) return

      const updateCarousel = () => {
        if (isDesktop && positions) {
          // Desktop: Update each position
          Object.entries(positions).forEach(([pos, items]) => {
            items.forEach((item) => {
              const itemIndex = parseInt(item.getAttribute('data-item-index'))
              const targetIndex =
                (currentIndex + parseInt(pos) - 1) % totalItems

              if (itemIndex === targetIndex) {
                item.classList.add('opacity-100')
                item.classList.remove('opacity-0')

                // Add gentle shake animation for position 2 (odd rows) or position 3 (even rows)
                const isEvenRow = rowIndex % 2 === 0
                const animationPosition = isEvenRow ? '3' : '2'

                if (pos === animationPosition) {
                  // Remove any existing animation class
                  item.classList.remove('shake-gentle')
                  // Force reflow to restart animation
                  void item.offsetWidth
                  // Add animation class
                  item.classList.add('shake-gentle')
                  // Remove animation class after completion
                  setTimeout(() => {
                    item.classList.remove('shake-gentle')
                  }, 2500)
                }
              } else {
                item.classList.remove('opacity-100')
                item.classList.add('opacity-0')
                item.classList.remove('shake-gentle')
              }
            })
          })
        } else if (track && window.innerWidth >= 1024) {
          // Only apply scroll transform for desktop
          const itemWidth = track.children[0].offsetWidth
          const gap = 16
          const offset = currentIndex * (itemWidth + gap)
          track.style.transform = `translateX(-${offset}px)`
        } else if (!isDesktop && mobilePosition1 && mobilePosition2) {
          // Mobile: Update two image positions with opacity
          // Position 1: Show current image
          const images1 = mobilePosition1.querySelectorAll(
            '[data-mobile-image-1]'
          )
          images1.forEach((item) => {
            const itemIndex = parseInt(
              item.getAttribute('data-mobile-item-index')
            )
            if (itemIndex === currentIndex) {
              item.classList.add('opacity-100')
              item.classList.remove('opacity-0')
            } else {
              item.classList.remove('opacity-100')
              item.classList.add('opacity-0')
            }
          })

          // Position 2: Show next image (offset by 1)
          const nextIndex = (currentIndex + 1) % totalItems
          const images2 = mobilePosition2.querySelectorAll(
            '[data-mobile-image-2]'
          )
          images2.forEach((item) => {
            const itemIndex = parseInt(
              item.getAttribute('data-mobile-item-index')
            )
            if (itemIndex === nextIndex) {
              item.classList.add('opacity-100')
              item.classList.remove('opacity-0')
            } else {
              item.classList.remove('opacity-100')
              item.classList.add('opacity-0')
            }
          })
        }

        // Update pagination
        if (pagination) {
          const paginationBtns = pagination.querySelectorAll('.pagination-btn')
          paginationBtns.forEach((btn, index) => {
            if (isDesktop) {
              // Desktop: Active is second position
              const secondPositionIndex = (currentIndex + 1) % totalItems
              btn.classList.toggle('is-active', index === secondPositionIndex)
            } else {
              // Mobile: Active is current index (NumberPagination component)
              btn.classList.toggle('is-active', index === currentIndex)
            }
          })
        }
      }

      const moveNext = () => {
        if (isTransitioning) return
        isTransitioning = true
        currentIndex = (currentIndex + 1) % totalItems
        updateCarousel()
        setTimeout(() => {
          isTransitioning = false
        }, 500)
      }

      const movePrev = () => {
        if (isTransitioning) return
        isTransitioning = true
        currentIndex = currentIndex === 0 ? totalItems - 1 : currentIndex - 1
        updateCarousel()
        setTimeout(() => {
          isTransitioning = false
        }, 500)
      }

      const startAutoScroll = () => {
        // Clear any existing interval before starting a new one
        stopAutoScroll()
        autoScrollInterval = setInterval(moveNext, 3000)
      }

      const stopAutoScroll = () => {
        if (autoScrollInterval) {
          clearInterval(autoScrollInterval)
        }
      }

      // Stop auto scroll on interaction (desktop only)
      if (isDesktop) {
        carousel.addEventListener('mouseenter', stopAutoScroll)
        carousel.addEventListener('mouseleave', startAutoScroll)
      }
      // Touch events for mobile
      if (!isDesktop) {
        carousel.addEventListener('touchstart', stopAutoScroll, {
          passive: true,
        })
      }

      // Pagination click handlers
      if (pagination) {
        const paginationBtns = pagination.querySelectorAll('.pagination-btn')
        paginationBtns.forEach((btn, index) => {
          btn.addEventListener('click', (e) => {
            e.preventDefault()
            if (isTransitioning) return
            stopAutoScroll()
            if (isDesktop) {
              // Desktop: クリックされた番号を左から2番目に表示するため、currentIndexを調整
              currentIndex = (index - 1 + totalItems) % totalItems
            } else {
              // Mobile: クリックされた番号をそのまま使用
              currentIndex = index
            }
            updateCarousel()
            setTimeout(() => {
              startAutoScroll()
            }, 2000)
          })
        })
      }

      if (prevBtn) {
        prevBtn.addEventListener('click', (e) => {
          e.preventDefault()
          stopAutoScroll()
          movePrev()
        })
      }

      if (nextBtn) {
        nextBtn.addEventListener('click', (e) => {
          e.preventDefault()
          stopAutoScroll()
          moveNext()
        })
      }

      // Mobile tap navigation
      if (!isDesktop && mobileCarousel) {
        const mobileTapPrevBtns = mobileCarousel.querySelectorAll(
          '[data-mobile-tap-prev]'
        )
        const mobileTapNextBtns = mobileCarousel.querySelectorAll(
          '[data-mobile-tap-next]'
        )

        mobileTapPrevBtns.forEach((btn) => {
          btn.addEventListener('click', (e) => {
            e.preventDefault()
            e.stopPropagation()
            stopAutoScroll()
            movePrev()
            setTimeout(() => {
              startAutoScroll()
            }, 3000)
          })
        })

        mobileTapNextBtns.forEach((btn) => {
          btn.addEventListener('click', (e) => {
            e.preventDefault()
            e.stopPropagation()
            stopAutoScroll()
            moveNext()
            setTimeout(() => {
              startAutoScroll()
            }, 3000)
          })
        })
      }

      // Initial update and start auto scroll
      updateCarousel()
      startAutoScroll()

      // Show tape animation for first row carousel
      if (rowIndex === 1) {
        const tapeElement = carousel.querySelector('.tape-carousel')
        if (tapeElement) {
          // Wait a bit for carousel to initialize
          setTimeout(() => {
            // Set initial rotation
            tapeElement.style.transform = 'translateX(-50%) rotate(-5deg)'
            tapeElement.style.opacity = '0'

            // Animate tape appearance
            setTimeout(() => {
              tapeElement.style.transition = 'all 0.3s ease-out'
              tapeElement.style.opacity = '1'
              tapeElement.style.transform = 'translateX(-50%) rotate(0deg)'
            }, 500)
          }, 1000)
        }
      }

      // Clean up on page unload
      window.addEventListener('beforeunload', stopAutoScroll)
    })
  }

  // Initialize on DOM content loaded
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initCarousels)
  } else {
    initCarousels()
  }

  // Reinitialize on Astro page transitions
  document.addEventListener('astro:page-load', initCarousels)
</script>

<style is:global>
  /* Gentle shake animation for position 2 and 3 images */
  [data-position='2'][data-carousel-item],
  [data-position='3'][data-carousel-item] {
    transform-origin: top center;
  }

  [data-carousel-item].shake-gentle {
    animation: gentleShake 2500ms ease-in-out;
  }

  @keyframes gentleShake {
    0% {
      transform: rotateZ(0);
    }
    10% {
      transform: rotateZ(-2.5deg);
    }
    20% {
      transform: rotateZ(1.2deg);
    }
    30% {
      transform: rotateZ(-0.8deg);
    }
    40% {
      transform: rotateZ(0.6deg);
    }
    50% {
      transform: rotateZ(-0.4deg);
    }
    60% {
      transform: rotateZ(0.3deg);
    }
    70% {
      transform: rotateZ(-0.25deg);
    }
    80% {
      transform: rotateZ(0.2deg);
    }
    90% {
      transform: rotateZ(-0.15deg);
    }
    100% {
      transform: rotateZ(0);
    }
  }
</style>
