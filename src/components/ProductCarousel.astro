---
import ProductInfoCard from './ProductInfoCard.astro'
import ImageCard from './ImageCard.astro'
import type { ProductInfo, CarouselItem } from '@/types/product'

interface Props {
  productInfo: ProductInfo
  items: CarouselItem[]
  id: string
  rowIndex?: number
}

const { productInfo, items, id, rowIndex = 1 } = Astro.props
---

<div
  class="product-carousel relative"
  data-carousel={id}
  data-row-index={rowIndex}
>
  <!-- Desktop: Fixed 4 positions layout -->
  <div class="hidden lg:flex gap-6 relative -ml-[20vw]">
    <!-- Position 1 -->
    <div class="relative w-[34vw] flex-shrink-0 aspect-[3/4]">
      {
        items.map((item, index) => (
          <div
            class:list={[
              'absolute inset-0 transition-opacity duration-500',
              {
                'opacity-100': index === items.length - 1,
                'opacity-0': index !== items.length - 1,
              },
            ]}
            data-carousel-item
            data-position="1"
            data-item-index={index}
          >
            <ImageCard image={item.image} alt={item.alt} />
          </div>
        ))
      }
    </div>

    <!-- Position 2 (or ProductInfoCard for row 2) -->
    <div class="relative w-[34vw] flex-shrink-0 aspect-[3/4]">
      {
        rowIndex % 2 === 0 ? (
          <ProductInfoCard
            {...productInfo}
            totalPages={items.length}
            carouselId={id}
          />
        ) : (
          items.map((item, index) => (
            <div
              class:list={[
                'absolute inset-0 transition-opacity duration-500',
                { 'opacity-100': index === 0, 'opacity-0': index !== 0 },
              ]}
              data-carousel-item
              data-position="2"
              data-item-index={index}
            >
              <ImageCard image={item.image} alt={item.alt} />
            </div>
          ))
        )
      }
    </div>

    <!-- Position 3 (or ProductInfoCard for row 1) -->
    <div class="relative w-[34vw] flex-shrink-0 aspect-[3/4]">
      {
        rowIndex % 2 === 1 ? (
          <ProductInfoCard
            {...productInfo}
            totalPages={items.length}
            carouselId={id}
          />
        ) : (
          items.map((item, index) => (
            <div
              class:list={[
                'absolute inset-0 transition-opacity duration-500',
                { 'opacity-100': index === 1, 'opacity-0': index !== 1 },
              ]}
              data-carousel-item
              data-position="3"
              data-item-index={index}
            >
              <ImageCard image={item.image} alt={item.alt} />
            </div>
          ))
        )
      }
    </div>

    <!-- Position 4 (half visible) -->
    <div class="relative w-[17vw] flex-shrink-0 overflow-hidden aspect-[3/4]">
      {
        items.map((item, index) => (
          <div
            class:list={[
              'absolute inset-0 transition-opacity duration-500',
              { 'opacity-100': index === 2, 'opacity-0': index !== 2 },
            ]}
            data-carousel-item
            data-position="4"
            data-item-index={index}
          >
            <div class="w-[34vw]">
              <ImageCard image={item.image} alt={item.alt} />
            </div>
          </div>
        ))
      }
    </div>
  </div>

  <!-- Mobile: Traditional scroll -->
  <div class="lg:hidden overflow-x-auto">
    <div class="flex gap-4 md:gap-6" data-carousel-track>
      <div class="flex-shrink-0 w-[280px] md:w-[320px]">
        <ProductInfoCard
          {...productInfo}
          totalPages={items.length}
          carouselId={id}
        />
      </div>
      {
        items.map((item) => (
          <div class="flex-shrink-0 w-[280px]">
            <ImageCard image={item.image} alt={item.alt} />
          </div>
        ))
      }
    </div>
  </div>

  <!-- Navigation buttons -->
  <button
    class="carousel-prev absolute left-0 top-1/2 -translate-y-1/2 -translate-x-4 md:-translate-x-6 z-10 bg-white/90 hover:bg-white rounded-full p-3 shadow-lg transition-all"
    aria-label="Previous items"
    data-carousel-prev
  >
    <svg
      class="w-5 h-5 text-navy"
      fill="none"
      stroke="currentColor"
      viewBox="0 0 24 24"
    >
      <path
        stroke-linecap="round"
        stroke-linejoin="round"
        stroke-width="2"
        d="M15 19l-7-7 7-7"></path>
    </svg>
  </button>

  <button
    class="carousel-next absolute right-0 top-1/2 -translate-y-1/2 translate-x-4 md:translate-x-6 z-10 bg-white/90 hover:bg-white rounded-full p-3 shadow-lg transition-all"
    aria-label="Next items"
    data-carousel-next
  >
    <svg
      class="w-5 h-5 text-navy"
      fill="none"
      stroke="currentColor"
      viewBox="0 0 24 24"
    >
      <path
        stroke-linecap="round"
        stroke-linejoin="round"
        stroke-width="2"
        d="M9 5l7 7-7 7"></path>
    </svg>
  </button>
</div>

<script is:inline>
  function initCarousels() {
    const carousels = document.querySelectorAll('[data-carousel]')

    carousels.forEach((carousel) => {
      const prevBtn = carousel.querySelector('[data-carousel-prev]')
      const nextBtn = carousel.querySelector('[data-carousel-next]')
      const carouselId = carousel.getAttribute('data-carousel')
      const rowIndex = parseInt(carousel.getAttribute('data-row-index') || '1')
      const pagination = document.querySelector(
        `[data-carousel-pagination="${carouselId}"]`
      )

      if (!prevBtn || !nextBtn) return

      let currentIndex = 0
      let autoScrollInterval
      let isTransitioning = false
      const isDesktop = window.innerWidth >= 1024

      // Get all carousel items and group by position
      const positions = isDesktop
        ? {
            1: carousel.querySelectorAll('[data-position="1"]'),
            2: carousel.querySelectorAll('[data-position="2"]'),
            3: carousel.querySelectorAll('[data-position="3"]'),
            4: carousel.querySelectorAll('[data-position="4"]'),
          }
        : null

      // For mobile, get track
      const track = carousel.querySelector('[data-carousel-track]')

      // Total items count
      const totalItems =
        isDesktop && positions[1]
          ? positions[1].length
          : track
            ? track.children.length - 1
            : 0 // -1 for info card

      if (totalItems === 0) return

      const updateCarousel = () => {
        if (isDesktop && positions) {
          // Desktop: Update each position
          Object.entries(positions).forEach(([pos, items]) => {
            items.forEach((item) => {
              const itemIndex = parseInt(item.getAttribute('data-item-index'))
              const targetIndex =
                (currentIndex + parseInt(pos) - 1) % totalItems

              if (itemIndex === targetIndex) {
                item.classList.add('opacity-100')
                item.classList.remove('opacity-0')
                
                // Add gentle shake animation for position 2 (odd rows) or position 3 (even rows)
                const isEvenRow = rowIndex % 2 === 0
                const animationPosition = isEvenRow ? '3' : '2'
                
                if (pos === animationPosition) {
                  // Remove any existing animation class
                  item.classList.remove('shake-gentle')
                  // Force reflow to restart animation
                  void item.offsetWidth
                  // Add animation class
                  item.classList.add('shake-gentle')
                  // Remove animation class after completion
                  setTimeout(() => {
                    item.classList.remove('shake-gentle')
                  }, 2500)
                }
              } else {
                item.classList.remove('opacity-100')
                item.classList.add('opacity-0')
                item.classList.remove('shake-gentle')
              }
            })
          })
        } else if (track) {
          // Mobile: Traditional scroll
          const itemWidth = track.children[0].offsetWidth
          const gap = 16
          const offset = currentIndex * (itemWidth + gap)
          track.style.transform = `translateX(-${offset}px)`
        }

        // Update pagination
        if (pagination) {
          const paginationBtns = pagination.querySelectorAll('.pagination-btn')
          paginationBtns.forEach((btn, index) => {
            // 左から2番目の画像のインデックスを計算
            const secondPositionIndex = (currentIndex + 1) % totalItems
            btn.classList.toggle('is-active', index === secondPositionIndex)
          })
        }
      }

      const moveNext = () => {
        if (isTransitioning) return
        isTransitioning = true
        currentIndex = (currentIndex + 1) % totalItems
        updateCarousel()
        setTimeout(() => {
          isTransitioning = false
        }, 500)
      }

      const movePrev = () => {
        if (isTransitioning) return
        isTransitioning = true
        currentIndex = currentIndex === 0 ? totalItems - 1 : currentIndex - 1
        updateCarousel()
        setTimeout(() => {
          isTransitioning = false
        }, 500)
      }

      const startAutoScroll = () => {
        autoScrollInterval = setInterval(moveNext, 3000)
      }

      const stopAutoScroll = () => {
        if (autoScrollInterval) {
          clearInterval(autoScrollInterval)
        }
      }

      // Stop auto scroll on interaction
      carousel.addEventListener('mouseenter', stopAutoScroll)
      carousel.addEventListener('mouseleave', startAutoScroll)
      carousel.addEventListener('touchstart', stopAutoScroll)

      // Pagination click handlers
      if (pagination) {
        const paginationBtns = pagination.querySelectorAll('.pagination-btn')
        paginationBtns.forEach((btn, index) => {
          btn.addEventListener('click', (e) => {
            e.preventDefault()
            if (isTransitioning) return
            stopAutoScroll()
            // クリックされた番号を左から2番目に表示するため、currentIndexを調整
            currentIndex = (index - 1 + totalItems) % totalItems
            updateCarousel()
          })
        })
      }

      prevBtn.addEventListener('click', (e) => {
        e.preventDefault()
        stopAutoScroll()
        movePrev()
      })

      nextBtn.addEventListener('click', (e) => {
        e.preventDefault()
        stopAutoScroll()
        moveNext()
      })

      // Initial update and start auto scroll
      updateCarousel()
      startAutoScroll()

      // Clean up on page unload
      window.addEventListener('beforeunload', stopAutoScroll)
    })
  }

  // Initialize on DOM content loaded
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initCarousels)
  } else {
    initCarousels()
  }

  // Reinitialize on Astro page transitions
  document.addEventListener('astro:page-load', initCarousels)
</script>

<style is:global>
  /* Gentle shake animation for position 2 and 3 images */
  [data-position="2"][data-carousel-item],
  [data-position="3"][data-carousel-item] {
    transform-origin: top center;
  }

  [data-carousel-item].shake-gentle {
    animation: gentleShake 2500ms ease-in-out;
  }

  @keyframes gentleShake {
    0% {
      transform: rotateZ(0);
    }
    10% {
      transform: rotateZ(-2.5deg);
    }
    20% {
      transform: rotateZ(1.2deg);
    }
    30% {
      transform: rotateZ(-0.8deg);
    }
    40% {
      transform: rotateZ(0.6deg);
    }
    50% {
      transform: rotateZ(-0.4deg);
    }
    60% {
      transform: rotateZ(0.3deg);
    }
    70% {
      transform: rotateZ(-0.25deg);
    }
    80% {
      transform: rotateZ(0.2deg);
    }
    90% {
      transform: rotateZ(-0.15deg);
    }
    100% {
      transform: rotateZ(0);
    }
  }
</style>
